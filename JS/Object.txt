객체(Object)
=> 데이터를 저장할 수 있는 속성(variable - property)과 기능을 수행하는 메서드(function - method)를
모아놓은 것
=>종류
사용자 정의 객체: 개발자가 필요에 의해서 생성
내장 객체: JavaScript에서 제공하는 객체-API(Application Programming Interface)나
SDK(Software Development Kit)라고도 함

3rd Party 객체: 다른 개발자나 회사가 제공(Library, Framework: Solution)

3. 사용자 정의 객체
1)생성
=>var(let이나 const) 이름=  {"속성이름":데이터,"메서드이름",메서드코드,}
=>var(let이나 const) 이름= new 생성자(매개변수 나열)

2) 내부 요소 호출(.을 이용)
이름.속성이름
이름.메서드이름(매개변수)
=>js에서는 . 대신에 [속성이름]으로 속성 호출이 가능한데 이때는 문자열 형태('', "")로 입력해야해.

var obj=["name":"adam"];
obj.name;
obj["name"]

=> 내부 속성은 중복해서 만들어지지 않기 때문에 동일한 이름에 2번 삽입하면 이전 내용이 없어지고 새로운 내용으로 변경됨.

3)for in
for(임시변수 in 객체){수행할 내용}
=>객체의 모든 속성의 이름을 임시변수에 문자열 형태로 대입하고 {} 안의 내용을 반복 수행
  for(attr in obj){
            console.log(obj[attr]);
        }

4) 속성이름 in 객체
=> 속성이 객체 존재하는지 여부를 판단해서 boolean으로 리턴

5)with 블럭
with(객체이름){
    //이 안에서는 객체 이름 생략해도됨
}


6) 속성 추가 및 수정
객체이름.속성이름=데이터 또는 함수;
=>존재하는 속성이면 수정, 존재하지 않는 속성이면 추가

7)속성 삭제
delete(객체이름.속성이름)

8)this
=>객체 안에 존재하는 메서드에 존재하는 숨겨진 매개변수
=>객체 안에 만들어진 메서드에서는 this라는 변수를 사용할 수 있는데 이 this는 객체를 참조합니다.
=>객체 안에 만들어진 메서드에서 객체의 속성을 이용할 때는 this.속성이름의 형태로 사용해야 합니다.
this를 붙이지 않으면 메서드 안에서 이름을 찾게 됩니다.
=> 화살표 함수에서는 this를 사용할 수 없습니당.

9)constructor(생성자)
=>생성자는 객체를 생성해서 메모리 할당을 하고 그 참조를 리턴하는 함수
=>일반 함수를 만드는 것과 동일한 방법으로 만드는데 객체를 생성하고자 하면 내부에서 this를 이용해서
필요한 속성과 메서드를 정의하면 된다.